<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- spring 不会自动去寻找注解,必须告诉spring 哪些包下的类中可能有注解 -->
	<context:component-scan base-package="com.advice,com.test"></context:component-scan>
	
	<!-- true 使用cglib动态代理  -->
	<!-- false 使用jdk动态代理 -->
	<aop:aspectj-autoproxy proxy-target-class="false"></aop:aspectj-autoproxy>
<!-- 	
十一. JDK 动态代理
1. 和cglib 动态代理对比
1.1 优点:jdk 自带,不需要额外导入jar
1.2 缺点:
1.2.1 真实对象必须实现接口
1.2.2 利用反射机制.效率不高.
2. 使用JDK 动态代理时可能出现下面异常
2.1 出现原因:希望把接口对象转换为具体真实对象 -->

<!-- 
十二: cglib 动态代理
1. cglib 优点:
1.1 基于字节码,生成真实对象的子类.
1.1.1 运行效率高于JDK 动态代理.
1.2 不需要实现接口
2. cglib 缺点:
2.1 非JDK 功能,需要额外导入jar
3. 使用spring aop 时,只要出现Proxy 和真实对象转换异常
	3.1 设置为true 使用cglib
	3.2 设置为false 使用jdk(默认值) -->
</beans>